apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-app-health
  namespace: demo
  labels:
    app.kubernetes.io/version: '0.2'
spec:
  description: |-
    This task outputs the argo managed app health status
    To do so, it requires the address of the Argo CD server and some form of authentication either a username/password or an authentication token.
  params:
    - description: name of the application to sync
      name: application-name
      type: string
    - default: HEAD
      description: the revision to sync to
      name: revision
      type: string
    - default: '--'
      name: flags
      type: string
    - default: v2.2.2
      name: argocd-version
      type: string
    - default: '60'
      name: timeout
      type: string
  results:
    - name: sync_status
      type: string
    - name: health_status
      type: string
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap
      - secretRef:
          name: argocd-env-secret
    name: ''
    resources: {}
  steps:
    - image: 'quay.io/argoproj/argocd:$(params.argocd-version)'
      name: login
      resources: {}
      script: |
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD";
        fi

        # end_time=$(($(date +%s) + $timeout))

        while true; do
          SYNC_STATUS=$(argocd app get $(params.application-name) | awk -F ': ' '/Sync Status:/ {print $2}' | tr -d '[:space:]')
          if echo $SYNC_STATUS | grep -iq "outofsync"; then
            echo "Application is out of sync!!"
            break
          else
            argocd app get $(params.application-name) --hard-refresh > /dev/null
            echo "No diff found, Refreshing the application!!"
            sleep 5
          fi
          
          # Check if timeout has been reached
          # current_time=$(date +%s)
          # if [ $current_time -gt $end_time ]; then
          #     echo "Timeout reached. Sync status not OutOfSync within $timeout seconds."
          #     break  # Exit the loop on timeout
          # fi
          # sleep 5
        done

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sync-argo-app
  namespace: demo
  labels:
    app.kubernetes.io/version: '0.2'
spec:
  description: |-
    This task checks diff for an Argo CD application.
    To do so, it requires the address of the Argo CD server and some form of authentication either a username/password or an authentication token.
  params:
    - description: name of the application to sync
      name: application-name
      type: string
    - default: HEAD
      description: the revision to sync to
      name: revision
      type: string
    - default: '--'
      name: flags
      type: string
    - default: v2.2.2
      name: argocd-version
      type: string
  results:
    - name: SYNC_STATUS
      type: string
    - name: HEALTH_STATUS
      type: string
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap
      - secretRef:
          name: argocd-env-secret
    name: ''
    resources: {}
  steps:
    - image: 'quay.io/argoproj/argocd:$(params.argocd-version)'
      name: login
      resources: {}
      script: |
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD";
        fi

        SYNC_STATUS=$(argocd app get $(params.application-name) | awk -F ': ' '/Sync Status:/ {print $2}' | tr -d '[:space:]')
        if echo $SYNC_STATUS | grep -iq "outofsync"; then
          
          echo "There is a diff, syncing the argo application!!"
          argocd app sync "$(params.application-name)" --revision "$(params.revision)" "$(params.flags)" > /dev/null
          
          echo "Waiting for argo application to be healthy!!"
          argocd app wait "$(params.application-name)" --health "$(params.flags)"

          SYNC_STAT=$(argocd app get $(params.application-name) | awk -F ': ' '/Sync Status:/ {print $2}' | tr -d '[:space:]')
          echo -n $SYNC_STAT > $(results.SYNC_STATUS.path)
          HEALTH_STAT=$(argocd app get $(params.application-name) | awk -F ': ' '/Health Status:/ {print $2}' | tr -d '[:space:]')
          echo -n $HEALTH_STAT > $(results.HEALTH_STATUS.path)
        fi
